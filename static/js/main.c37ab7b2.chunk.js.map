{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","id","ques","options","answer","question","counter","setCounter","checked","setChecked","setuserInput","results","filter","obj","className","onSubmit","e","preventDefault","alert","handleSubmit","map","i","key","onClick","type","value","disabled","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,oHCkE5BC,MA9Df,WAAgB,IAAD,EACkBC,mBAAS,CACtC,CACAC,GAAG,EACHC,KAAM,2BACNC,QAAQ,CAAC,OAAO,OAAO,OAAO,QAC9BC,OAAQ,QAEV,CACEH,GAAG,EACHC,KAAM,4BACNC,QAAQ,CAAC,WAAW,SAAS,OAAO,OACpCC,OAAQ,UAZG,mBACNC,EADM,aAgBiBL,mBAAS,IAhB1B,mBAgBNM,EAhBM,KAgBGC,EAhBH,OAiBiBP,mBAAS,IAjB1B,mBAiBNQ,EAjBM,KAiBGC,EAjBH,OAkBqBT,mBAAS,IAlB9B,mBAkBKU,GAlBL,WAmBTC,EAAUN,EAASO,QAAO,SAASC,GAAO,OAAOA,EAAIZ,IAAMK,KA0B/D,OACE,yBAAKQ,UAAU,OACb,0BAAMC,SAAU,SAAAC,GAAC,OA1BF,SAACA,GAClBA,EAAEC,iBACFP,EAAaF,GAEbU,MAAM,qBAAqBP,EAAQ,GAAGP,QAsBjBe,CAAaH,IAAIF,UAAU,YAC5C,6BAAMH,EAAQ,GAAGT,MAEbS,EAAQ,GAAGR,QAAQiB,KAAI,SAACC,GAAD,OAAK,yBAAKC,IAAKD,GAAG,2BAAOE,QAAS,SAAAP,GAAC,OAAEP,EAAWY,IAAIG,KAAK,QAAQC,MAAOJ,IAAKA,MAGxG,4BAAQK,SAAqB,GAAXpB,EAAckB,KAAK,SAASD,QAftC,WAEZhB,EADWD,EACK,KAaZ,YACA,4BAAQkB,KAAK,UAAb,UACA,4BAAQE,SAAqB,GAAXpB,EAAckB,KAAK,SAASD,QAtBvC,WAEXhB,EADWD,EACK,KAoBZ,QACA,4BAAQkB,KAAK,SAASD,QA5BX,WACfL,MAAM,qBAAqBV,EAAQ,uBAAuBG,EAAQ,GAAGP,QACrEuB,QAAQC,IAAIpB,KA0BR,kBChDYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.c37ab7b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [question, setQuestion]= useState([\n    {\n    id:1,\n    ques: 'What is the current year',\n    options:['2017','2018','2019','2020'],\n    answer: '2020'\n  },\n  {\n    id:2,\n    ques: 'What is the current Month',\n    options:['Januaray','August','June','May'],\n    answer: 'June'\n  }]\n  );\n  \n  const [counter, setCounter] = useState(1);\n  const [checked, setChecked] = useState('');\n  const [userInput, setuserInput] = useState('');\n  var results = question.filter(function(obj) { return obj.id == counter; });\n\n  const handleSubmit=(e)=>{\n    e.preventDefault();\n    setuserInput(checked);\n\n    alert(\"Correct answer is \"+results[0].answer);\n  }\n\n  const showAnswer=()=>{\n    alert(\"You have selected \"+checked+\"  Correct answer is \"+results[0].answer);\n    console.log(checked);\n  }\n\n  const Next = () =>{\n    let prev = counter;\n    setCounter(prev+1);\n  }\n\n  const Prevs = () =>{\n    let prev = counter;\n    setCounter(prev-1);\n  }\n\n // console.log(results);\n  \n  return (\n    <div className=\"App\">\n      <form onSubmit={e=>handleSubmit(e)} className=\"editForm\">\n        <div>{results[0].ques}</div>\n        {\n            results[0].options.map((i)=><div key={i}><input onClick={e=>setChecked(i)} type=\"radio\" value={i}/>{i}</div>)\n        }\n\n        <button disabled={counter == 1} type=\"button\" onClick={Prevs}>Previous</button>\n        <button type=\"submit\">Submit</button>\n        <button disabled={counter == 2} type=\"button\" onClick={Next}>Next</button>\n        <button type=\"button\" onClick={showAnswer}>Show Answer</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}